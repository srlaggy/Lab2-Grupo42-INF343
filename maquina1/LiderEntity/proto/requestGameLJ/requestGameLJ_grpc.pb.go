// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequestGameServiceClient is the client API for RequestGameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestGameServiceClient interface {
	RequestGame(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameResp, error)
}

type requestGameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestGameServiceClient(cc grpc.ClientConnInterface) RequestGameServiceClient {
	return &requestGameServiceClient{cc}
}

func (c *requestGameServiceClient) RequestGame(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameResp, error) {
	out := new(GameResp)
	err := c.cc.Invoke(ctx, "/requestGameLJ.RequestGameService/RequestGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestGameServiceServer is the server API for RequestGameService service.
// All implementations must embed UnimplementedRequestGameServiceServer
// for forward compatibility
type RequestGameServiceServer interface {
	RequestGame(context.Context, *GameReq) (*GameResp, error)
	mustEmbedUnimplementedRequestGameServiceServer()
}

// UnimplementedRequestGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequestGameServiceServer struct {
}

func (UnimplementedRequestGameServiceServer) RequestGame(context.Context, *GameReq) (*GameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGame not implemented")
}
func (UnimplementedRequestGameServiceServer) mustEmbedUnimplementedRequestGameServiceServer() {}

// UnsafeRequestGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestGameServiceServer will
// result in compilation errors.
type UnsafeRequestGameServiceServer interface {
	mustEmbedUnimplementedRequestGameServiceServer()
}

func RegisterRequestGameServiceServer(s grpc.ServiceRegistrar, srv RequestGameServiceServer) {
	s.RegisterService(&RequestGameService_ServiceDesc, srv)
}

func _RequestGameService_RequestGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestGameServiceServer).RequestGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/requestGameLJ.RequestGameService/RequestGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestGameServiceServer).RequestGame(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestGameService_ServiceDesc is the grpc.ServiceDesc for RequestGameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestGameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requestGameLJ.RequestGameService",
	HandlerType: (*RequestGameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestGame",
			Handler:    _RequestGameService_RequestGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requestGameLJ.proto",
}

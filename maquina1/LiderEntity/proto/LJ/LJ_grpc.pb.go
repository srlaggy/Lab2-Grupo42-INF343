// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiderJugadorServiceClient is the client API for LiderJugadorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiderJugadorServiceClient interface {
	RequestGame(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameResp, error)
	EtapaUno(ctx context.Context, in *NumPasosReq, opts ...grpc.CallOption) (*NumPasosResp, error)
}

type liderJugadorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiderJugadorServiceClient(cc grpc.ClientConnInterface) LiderJugadorServiceClient {
	return &liderJugadorServiceClient{cc}
}

func (c *liderJugadorServiceClient) RequestGame(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameResp, error) {
	out := new(GameResp)
	err := c.cc.Invoke(ctx, "/LJ.LiderJugadorService/RequestGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liderJugadorServiceClient) EtapaUno(ctx context.Context, in *NumPasosReq, opts ...grpc.CallOption) (*NumPasosResp, error) {
	out := new(NumPasosResp)
	err := c.cc.Invoke(ctx, "/LJ.LiderJugadorService/EtapaUno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiderJugadorServiceServer is the server API for LiderJugadorService service.
// All implementations must embed UnimplementedLiderJugadorServiceServer
// for forward compatibility
type LiderJugadorServiceServer interface {
	RequestGame(context.Context, *GameReq) (*GameResp, error)
	EtapaUno(context.Context, *NumPasosReq) (*NumPasosResp, error)
	mustEmbedUnimplementedLiderJugadorServiceServer()
}

// UnimplementedLiderJugadorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiderJugadorServiceServer struct {
}

func (UnimplementedLiderJugadorServiceServer) RequestGame(context.Context, *GameReq) (*GameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGame not implemented")
}
func (UnimplementedLiderJugadorServiceServer) EtapaUno(context.Context, *NumPasosReq) (*NumPasosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EtapaUno not implemented")
}
func (UnimplementedLiderJugadorServiceServer) mustEmbedUnimplementedLiderJugadorServiceServer() {}

// UnsafeLiderJugadorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiderJugadorServiceServer will
// result in compilation errors.
type UnsafeLiderJugadorServiceServer interface {
	mustEmbedUnimplementedLiderJugadorServiceServer()
}

func RegisterLiderJugadorServiceServer(s grpc.ServiceRegistrar, srv LiderJugadorServiceServer) {
	s.RegisterService(&LiderJugadorService_ServiceDesc, srv)
}

func _LiderJugadorService_RequestGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderJugadorServiceServer).RequestGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LJ.LiderJugadorService/RequestGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderJugadorServiceServer).RequestGame(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiderJugadorService_EtapaUno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumPasosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiderJugadorServiceServer).EtapaUno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LJ.LiderJugadorService/EtapaUno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiderJugadorServiceServer).EtapaUno(ctx, req.(*NumPasosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiderJugadorService_ServiceDesc is the grpc.ServiceDesc for LiderJugadorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiderJugadorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LJ.LiderJugadorService",
	HandlerType: (*LiderJugadorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestGame",
			Handler:    _LiderJugadorService_RequestGame_Handler,
		},
		{
			MethodName: "EtapaUno",
			Handler:    _LiderJugadorService_EtapaUno_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LJ.proto",
}

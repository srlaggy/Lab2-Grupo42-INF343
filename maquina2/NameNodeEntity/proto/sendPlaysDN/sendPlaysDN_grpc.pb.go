// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nameNode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JugadasServiceClient is the client API for JugadasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JugadasServiceClient interface {
	SendJugadas(ctx context.Context, in *JugadasReq, opts ...grpc.CallOption) (*JugadasResp, error)
}

type jugadasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJugadasServiceClient(cc grpc.ClientConnInterface) JugadasServiceClient {
	return &jugadasServiceClient{cc}
}

func (c *jugadasServiceClient) SendJugadas(ctx context.Context, in *JugadasReq, opts ...grpc.CallOption) (*JugadasResp, error) {
	out := new(JugadasResp)
	err := c.cc.Invoke(ctx, "/sendPlaysDN.JugadasService/SendJugadas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JugadasServiceServer is the server API for JugadasService service.
// All implementations must embed UnimplementedJugadasServiceServer
// for forward compatibility
type JugadasServiceServer interface {
	SendJugadas(context.Context, *JugadasReq) (*JugadasResp, error)
	mustEmbedUnimplementedJugadasServiceServer()
}

// UnimplementedJugadasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJugadasServiceServer struct {
}

func (UnimplementedJugadasServiceServer) SendJugadas(context.Context, *JugadasReq) (*JugadasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJugadas not implemented")
}
func (UnimplementedJugadasServiceServer) mustEmbedUnimplementedJugadasServiceServer() {}

// UnsafeJugadasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JugadasServiceServer will
// result in compilation errors.
type UnsafeJugadasServiceServer interface {
	mustEmbedUnimplementedJugadasServiceServer()
}

func RegisterJugadasServiceServer(s grpc.ServiceRegistrar, srv JugadasServiceServer) {
	s.RegisterService(&JugadasService_ServiceDesc, srv)
}

func _JugadasService_SendJugadas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JugadasServiceServer).SendJugadas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sendPlaysDN.JugadasService/SendJugadas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JugadasServiceServer).SendJugadas(ctx, req.(*JugadasReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JugadasService_ServiceDesc is the grpc.ServiceDesc for JugadasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JugadasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sendPlaysDN.JugadasService",
	HandlerType: (*JugadasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJugadas",
			Handler:    _JugadasService_SendJugadas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sendPlaysDN.proto",
}
